<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Roads API Demo</title>
    <style>
        html, body
        {
            position: absolute;
            height: 100vh;
            width: 100vw;
            margin: 0px;
            padding: 0px
        }
        #map{
            width: 70vw;
            height: 100vh;
            border-radius: 35px;
        }
        #panel 
        {
            position: absolute;
            top: 5px;
            left: 50%;
            margin-left: -180px;
            z-index: 5;
            background-color: #fff;
            padding: 5px;
            border: 1px solid #999;
        }
        #bar 
        {
            background-color: rgba(255, 255, 255, 0.75);
            height: 40px;
            margin: 8px;
            padding: 4px;
            border-radius: 4px;
        }
        #autoc
        {
            width: 100%;
            box-sizing: border-box;
        }
    </style>

    <script src="https://www.gstatic.com/external_hosted/jquery2.min.js"></script>
    <script
        src="https://maps.googleapis.com/maps/api/js?libraries=drawing,places&key=AIzaSyBSL0N9YBwnl00XZ8UqRYgX2-YF_S9j3R4"></script>
    <script>
        var apiKey = "AIzaSyByt2xHPsNHwyKkqoOqSD8XuE7_yPC47PE";
        var map;
        var drawingManager;
        var placeIdArray = [];
        var polylines = [];
        var snappedCoordinates = [];
        function initialize()
        {
            var LocationList = @Html.Raw(Json.Serialize(ViewBag.Locations));
            var mapOptions =
            {
                zoom: 13,
                center:
                {
                     lat: 49.8397, lng: 24.0297
                }
            };
            
            map = new google.maps.Map(document.getElementById('map'), mapOptions);
            
             const labels = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            
                     var list_location = []
                      
                      for (var x=0;x<LocationList.length;x++)
                      {
                         list_location.push({lat: parseFloat(LocationList[x].split(',')[0]), lng: parseFloat(LocationList[x].split(',')[1])});
                      }
                  
                  const markers = list_location.map((location, i) => {
                    return new google.maps.Marker({
                      position: location,
                      label: labels[i % labels.length],
                    });
                  });
            
                var markerCluster = new MarkerClusterer(map, markers,
                            {imagePath: "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m"});
            
            
            
            
            
            
            
            
            // Adds a Places search box. Searching for a place will center the map on that
            // location.
            map.controls[google.maps.ControlPosition.RIGHT_TOP].push(document.getElementById('bar'));
            var autocomplete = new google.maps.places.Autocomplete(document.getElementById('autoc'));
            autocomplete.bindTo('bounds', map);
            autocomplete.addListener('place_changed', function ()
            {
                var place = autocomplete.getPlace();
                if (place.geometry.viewport)
                {
                    map.fitBounds(place.geometry.viewport);
                }
                else
                {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }
            });
            // Enables the polyline drawing control. Click on the map to start drawing a
            // polyline. Each click will add a new vertice. Double-click to stop drawing.
            drawingManager = new google.maps.drawing.DrawingManager(
                {
                    drawingMode: google.maps.drawing.OverlayType.POLYLINE,
                    drawingControl: true,
                    drawingControlOptions:
                    {
                        position: google.maps.ControlPosition.TOP_CENTER,
                        drawingModes: [google.maps.drawing.OverlayType.POLYLINE]
                    },
                    polylineOptions:
                    {
                        strokeColor: '#696969',
                        strokeWeight: 2,
                        strokeOpacity: 0.3,
                    }
                });
            drawingManager.setMap(map);
            // Snap-to-road when the polyline is completed.
            drawingManager.addListener('polylinecomplete', function (poly)
            {
                var path = poly.getPath();
                polylines.push(poly);
                placeIdArray = [];
                runSnapToRoad(path);
            });
            // Clear button. Click to remove all polylines.
            document.getElementById('clear').addEventListener('click', function (event)
            {
                event.preventDefault();
                for (var i = 0; i < polylines.length; ++i)
                {
                    polylines[i].setMap(null);
                }
                polylines = [];
                return false;
            });
        }
        // Snap a user-created polyline to roads and draw the snapped path
        function runSnapToRoad(path)
        {
            var pathValues = [];
            for (var i = 0; i < path.getLength(); i++)
            {
                pathValues.push(path.getAt(i).toUrlValue());
            }
            $.get('https://roads.googleapis.com/v1/snapToRoads?parameters&key=AIzaSyByt2xHPsNHwyKkqoOqSD8XuE7_yPC47PE',
                function (data)
                {
                    processSnapToRoadResponse(data);
                    drawSnappedPolyline();
                });
        }
        // Store snapped polyline returned by the snap-to-road service.
        function processSnapToRoadResponse(data)
        {
            snappedCoordinates = [];
            placeIdArray = [];
            for (var i = 0; i < data.snappedPoints.length; i++)
            {
                var latlng = new google.maps.LatLng(
                    data.snappedPoints[i].location.latitude,
                    data.snappedPoints[i].location.longitude);
                snappedCoordinates.push(latlng);
                placeIdArray.push(data.snappedPoints[i].placeId);
            }
        }
        // Draws the snapped polyline (after processing snap-to-road response).
        function drawSnappedPolyline()
        {
            var snappedPolyline = new google.maps.Polyline(
                {
                    path: snappedCoordinates,
                    strokeColor: '#add8e6',
                    strokeWeight: 4,
                    strokeOpacity: 0.9,
                });
            snappedPolyline.setMap(map);
            polylines.push(snappedPolyline);
        }
        $(window).load(initialize);
    </script>
    
        <script src="https://unpkg.com/@@googlemaps/markerclustererplus/dist/index.min.js"></script>
        
        <script
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBSL0N9YBwnl00XZ8UqRYgX2-YF_S9j3R4&callback=initMap"
            defer
        ></script>
        
    
</head>

<body>
    <div class="content-section">
        <div id="map"></div>
    </div>
<div id="bar">
    <button draggable="false" type="button" aria-pressed="false" style="background: none padding-box rgb(255, 255, 255); display: table-cell; border: 0px; margin: 0px; padding: 0px 17px; text-transform: none; appearance: none; position: relative; cursor: pointer; user-select: none; direction: ltr; overflow: hidden; text-align: center; height: 40px; vertical-align: middle; color: rgb(86, 86, 86); font-family: Roboto, Arial, sans-serif; font-size: 18px; border-bottom-right-radius: 2px; border-top-right-radius: 2px; box-shadow: rgba(0, 0, 0, 0.3) 0px 1px 4px -1px; min-width: 66px;" id="clear" href="#" aria-expanded="false">Clear map</button>
</div>
</body>
</html>